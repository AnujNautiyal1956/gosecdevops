variables:
  PACKAGE_PATH: /go/src/gitlab.com/AnujNautiyal1308/gosecdevops

stages:
  - dep
  - test
  - Check-Git-secrets
  - Source-composition-Analysis
  - SAST Sonar analyze
  - build&push

#  Golang-in-Gitlab 
.anchors:
  - &inject-gopath
      mkdir -p $(dirname ${PACKAGE_PATH})
      && ln -s ${CI_PROJECT_DIR} ${PACKAGE_PATH}
      && cd ${PACKAGE_PATH}
dep:
  stage: dep
  image: golang:1.10-alpine3.7
  before_script:
    - apk add --no-cache curl git
    - curl -sSL https://github.com/golang/dep/releases/download/v0.5.0/dep-linux-amd64 -o /go/bin/dep
    - chmod +x /go/bin/dep
    - *inject-gopath
  script:
    - dep ensure -v -vendor-only
  artifacts:
    name: "vendor-$CI_PIPELINE_ID"
    paths:
      - vendor/
    expire_in: 1 hour

test:
  stage: test
  dependencies:
    - dep
  image: golang:1.10-alpine3.7
  before_script:
    - *inject-gopath
  script:
    - go test ./...

check-git-secrets:
  stage: Check-Git-secrets
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - *inject-gopath
  script:
    - rm -rf trufflehog || true
    - docker run gesellix/trufflehog --json https://gitlab.com/AnujNautiyal1308/webapp.git > trufflehog
    - cat trufflehog    

source-composition-analysis:
  stage: Source-composition-Analysis
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - *inject-gopath
  script:
    - chmod +x owasp-dependency-check.sh
    - ./owasp-dependency-check.sh  
  only:
    - merge-requests  
  artifacts:
    when: always
    paths:
      - /reports/dependency-check-report.xml

SAST:
  stage: SAST Sonar analyze
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    # Defines the location of the analysis task cache
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    # Shallow cloning needs to be disabled.
    # See https://docs.sonarqube.org/latest/analysis/gitlab-cicd/.
    GIT_DEPTH: 0
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  rules:
    # SonarQube CommunityEdition only supports analyzing a single branch.
    # So only run on master.
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
    - when: never

docker-build-push:
  # Official docker image.
  image: docker:latest
  stage: build&push
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"

